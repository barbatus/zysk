{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":";;;AA0BA,4BAcC;AAID,gDAQC;AApDD,yBAAuB;AAEvB,6BAAwB;AAEX,QAAA,2BAA2B,GAAG,OAAC,CAAC,MAAM,CAAC;IAClD,aAAa,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACpC,mBAAmB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC1C,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACnC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACjC,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACrC,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACrC,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;CACrB,CAAC,CAAC;AAcH,SAAgB,QAAQ,CAAC,MAA+B;IACtD,MAAM,kBAAkB,GAAG,mCAA2B,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAErE,MAAM,SAAS,GAAc;QAC3B,YAAY,EAAE,kBAAkB,CAAC,aAAa;QAC9C,iBAAiB,EAAE,kBAAkB,CAAC,mBAAmB;QACzD,WAAW,EAAE,kBAAkB,CAAC,YAAY;QAC5C,SAAS,EAAE,kBAAkB,CAAC,UAAU;QACxC,aAAa,EAAE,kBAAkB,CAAC,cAAc;QAChD,aAAa,EAAE,kBAAkB,CAAC,cAAc;QAChD,GAAG,EAAE,kBAAkB,CAAC,QAAQ;KACjC,CAAC;IAEF,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AAC/B,CAAC;AAED,IAAI,eAAsC,CAAC;AAE3C,SAAgB,kBAAkB;IAChC,IAAI,eAAe,KAAK,SAAS,EAAE,CAAC;QAClC,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9C,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC;IACzC,OAAO,eAAe,CAAC;AACzB,CAAC;AAEY,QAAA,eAAe,GAAW,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import \"dotenv/config\";\n\nimport { z } from \"zod\";\n\nexport const AppConfigEnvVariablesSchema = z.object({\n  CAPTCHA_TOKEN: z.string().optional(),\n  SCRAPPER_BROWSER_WS: z.string().optional(),\n  PROXY_SERVER: z.string().optional(),\n  PROXY_PORT: z.string().optional(),\n  PROXY_USERNAME: z.string().optional(),\n  PROXY_PASSWORD: z.string().optional(),\n  NODE_ENV: z.string(),\n});\n\nexport type AppConfigEnvVariables = z.infer<typeof AppConfigEnvVariablesSchema>;\n\nexport interface AppConfig {\n  captchaToken?: string;\n  scrapperBrowserWs?: string;\n  proxyServer?: string;\n  proxyPort?: string;\n  proxyUsername?: string;\n  proxyPassword?: string;\n  env: string;\n}\n\nexport function validate(config: Record<string, unknown>) {\n  const appConfigValidated = AppConfigEnvVariablesSchema.parse(config);\n\n  const appConfig: AppConfig = {\n    captchaToken: appConfigValidated.CAPTCHA_TOKEN,\n    scrapperBrowserWs: appConfigValidated.SCRAPPER_BROWSER_WS,\n    proxyServer: appConfigValidated.PROXY_SERVER,\n    proxyPort: appConfigValidated.PROXY_PORT,\n    proxyUsername: appConfigValidated.PROXY_USERNAME,\n    proxyPassword: appConfigValidated.PROXY_PASSWORD,\n    env: appConfigValidated.NODE_ENV,\n  };\n\n  return { config: appConfig };\n}\n\nlet appConfigStatic: AppConfig | undefined;\n\nexport function getAppConfigStatic() {\n  if (appConfigStatic !== undefined) {\n    return appConfigStatic;\n  }\n\n  const parsedAppConfig = validate(process.env);\n  appConfigStatic = parsedAppConfig.config;\n  return appConfigStatic;\n}\n\nexport const appConfigSymbol: symbol = Symbol.for(\"AppConfig\");\n"]}