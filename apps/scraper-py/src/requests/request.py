from typing import Literal

from . import tls_request
from .session import Session


class Request(Session):
    def __init__(self, proxy=None, user_agent=None):
        self._proxy = proxy
        self._user_agent = user_agent

    def _merge_kwargs(self, kwargs):
        return {k: v for k, v in kwargs.items() if v is not None}

    def _build_kwargs(
        self,
        *,
        params=None,
        data=None,
        headers=None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=None,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
        json=None,
        browser: Literal["firefox", "chrome"] | None = None,
        user_agent: str | None = None,
        os: Literal["windows", "mac", "linux"] | None = None,
        referer: str | None = None,
    ):
        effective_proxies = proxies or self._proxy
        effective_user_agent = user_agent or self._user_agent

        return self._merge_kwargs(
            {
                "params": params,
                "data": data,
                "headers": headers,
                "cookies": cookies,
                "files": files,
                "auth": auth,
                "timeout": timeout,
                "allow_redirects": allow_redirects,
                "proxies": effective_proxies,
                "hooks": hooks,
                "stream": stream,
                "verify": verify,
                "cert": cert,
                "json": json,
                # Special extras
                "browser": browser,
                "user_agent": effective_user_agent,
                "os": os,
                "referer": referer,
            }
        )

    def _call(self, method: str, url: str, kwargs: dict):
        func = getattr(tls_request, method)
        return func(url, **kwargs)

    def get(
        self,
        url: str,
        referer: str = "https://www.google.com/",
        params=None,
        data=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=True,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
        json=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
            referer=referer,
        )
        return self._call("get", url, kwargs)

    def options(
        self,
        url: str,
        params=None,
        data=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=False,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
        json=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("options", url, kwargs)

    def head(
        self,
        url: str,
        params=None,
        data=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=True,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
        json=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("head", url, kwargs)

    def post(
        self,
        url: str,
        data=None,
        json=None,
        params=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=True,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("post", url, kwargs)

    def put(
        self,
        url: str,
        data=None,
        json=None,
        params=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=True,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("put", url, kwargs)

    def patch(
        self,
        url: str,
        data=None,
        json=None,
        params=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=True,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("patch", url, kwargs)

    def delete(
        self,
        url: str,
        params=None,
        data=None,
        headers=None,
        browser: Literal["firefox", "chrome"] | None = "firefox",
        os: Literal["windows", "mac", "linux"] | None = None,
        user_agent: str | None = None,
        cookies=None,
        files=None,
        auth=None,
        timeout=None,
        allow_redirects=False,
        proxies=None,
        hooks=None,
        stream=None,
        verify=None,
        cert=None,
        json=None,
    ):
        kwargs = self._build_kwargs(
            params=params,
            data=data,
            headers=headers,
            cookies=cookies,
            files=files,
            auth=auth,
            timeout=timeout,
            allow_redirects=allow_redirects,
            proxies=proxies,
            hooks=hooks,
            stream=stream,
            verify=verify,
            cert=cert,
            json=json,
            browser=browser,
            user_agent=user_agent,
            os=os,
        )
        return self._call("delete", url, kwargs)
